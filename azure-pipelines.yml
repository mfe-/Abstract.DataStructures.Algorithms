# Starter pipeline


# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

pool:
  vmImage: 'windows-latest'

steps:
- task: DotNetCoreCLI@2
  displayName: build solution
  inputs:
    command: 'build'
    projects: 'DataStructures.UI.sln'
    arguments: '--configuration=Release --verbosity=n'

- script: dotnet test DataStructures.sln --logger trx  --collect "Code coverage"
  displayName: 'run test'
  condition: succeededOrFailed()

- task: PublishTestResults@2
  displayName: publish test results
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: DotNetCoreCLI@2
  displayName: create nuget DataStructures
  condition: succeededOrFailed()
  inputs:
    command: 'pack'
    arguments: '--include-symbols --include-source --output $(Build.ArtifactStagingDirectory)'
    packagesToPack: '**/DataStructures.csproj;**/Algorithms.Graph.csproj'
    includesymbols: true
    includesource: true
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'Normal'


- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    publishVstsFeed: 'get-the-solution'
    allowPackageConflicts: true

- task: PublishBuildArtifacts@1
  displayName: "Upload Artifacts"
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'DataStructures' 