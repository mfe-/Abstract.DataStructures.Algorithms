<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework"
    >

    <!--Margin Wert für alle Controls-->
    <windows:Thickness x:Key="CommonMargin">2</windows:Thickness>

    <!--
    Control Eigenschaften 
    http://msdn.microsoft.com/en-us/library/system.windows.controls.control_members.aspx
    -->
    <Style x:Key="CommonStyle">
        <Setter Property="Control.VerticalAlignment" Value="Top" />
        <Setter Property="Control.HorizontalAlignment" Value="Left" />
        <Setter Property="Control.MinWidth" Value="150" />
        <Setter Property="Control.Margin" Value="{DynamicResource CommonMargin}" />
    </Style>

    <Style x:Key="CommonListStyle">
        <Setter Property="Control.VerticalAlignment" Value="Top" />
        <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
        <Setter Property="Control.MinHeight" Value="100" />
        <Setter Property="Control.Margin" Value="{DynamicResource CommonMargin}" />
    </Style>

    <!--Stanard Control Styles überschreiben-->
    <Style TargetType="{x:Type TextBlock}">
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource CommonStyle}" >
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource CommonStyle}">
    </Style>
    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource CommonListStyle}">
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CommonStyle}">
        <Setter Property="Control.MinWidth" Value="50" />
    </Style>

    <!--Erweiterte Control Styles-->
    <Style x:Key="TextBoxMultiLineStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="AcceptsReturn" Value="True"></Setter>
        <Setter Property="TextWrapping" Value="Wrap"></Setter>
        <Setter Property="VerticalScrollBarVisibility" Value="Visible"></Setter>
        <Setter Property="SpellCheck.IsEnabled" Value="True"></Setter>
        <Setter Property="MinHeight" Value="100"></Setter>
    </Style>

    <!-- Expander Animation Y-->
    <Storyboard x:Key="OpenExpanderAnimation">
        <DoubleAnimation From="0" To="1" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="LayoutTransform.(ScaleTransform.ScaleY)" Duration="0:00:00.5"/>
    </Storyboard>

    <Storyboard x:Key="CollapseExpanderAnimation">
        <DoubleAnimation From="1" To="0" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="LayoutTransform.(ScaleTransform.ScaleY)" Duration="0:00:00.5"/>
    </Storyboard>

    <Style TargetType="{ x:Type Expander }" >
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{ TemplateBinding Content }"
                                      ContentStringFormat="{ TemplateBinding ContentStringFormat }" x:Name="ExpandSite">
                        <ContentPresenter.LayoutTransform>
                            <ScaleTransform ScaleX="1" />
                        </ContentPresenter.LayoutTransform>
                    </ContentPresenter>
                    
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{ Binding RelativeSource={ RelativeSource Mode=FindAncestor,AncestorType={ x:Type Expander } }, Path=IsExpanded }" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{ StaticResource OpenExpanderAnimation }" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{ StaticResource CollapseExpanderAnimation }" />
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander Animation X-->
    <Storyboard x:Key="OpenExpanderAnimationX">
        <DoubleAnimation From="0" To="1" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="LayoutTransform.(ScaleTransform.ScaleX)" Duration="0:00:00.5"/>
    </Storyboard>

    <Storyboard x:Key="CollapseExpanderAnimationX">
        <DoubleAnimation From="1" To="0" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="LayoutTransform.(ScaleTransform.ScaleX)" Duration="0:00:00.5"/>
    </Storyboard>

    <Style x:Key="ExpanderVertical" TargetType="{ x:Type Expander }" >
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{ TemplateBinding Content }"
                                      ContentStringFormat="{ TemplateBinding ContentStringFormat }" x:Name="ExpandSite">
                        <ContentPresenter.LayoutTransform>
                            <ScaleTransform ScaleX="1" />
                        </ContentPresenter.LayoutTransform>
                    </ContentPresenter>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{ Binding RelativeSource={ RelativeSource Mode=FindAncestor,AncestorType={ x:Type Expander } }, Path=IsExpanded }" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{ StaticResource OpenExpanderAnimationX }" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{ StaticResource CollapseExpanderAnimationX }" />
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>